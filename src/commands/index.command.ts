import { Markup, Telegraf } from "telegraf";
import { Command } from "./command.class";
import { Review, IBotContext } from "../context/context.interface";
import pool from "../db/db.config";

export class IndexCommand extends Command {
  constructor(bot: Telegraf<IBotContext>) {
    super(bot);
  }

  handle(): void {
    this.bot.action("reviews_list", async (ctx) => {
      const username = ctx.from?.username;
      if (username) {
        const reviews = await this.showReviews(username);

        if (reviews.length > 0) {
          const buttons = reviews.map((review) =>
            Markup.button.callback(
              `${review.type} "${review.title}" ‚û°Ô∏è`,
              `review_${review.id}`,
            ),
          );

          const inlineKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu")],
            ...buttons.map((button) => [button]),
          ]);

          await ctx.editMessageText("–í–∞—à–∏ –æ–±–∑–æ—Ä—ã:", inlineKeyboard);
        } else {
          await ctx.editMessageText(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±–∑–æ—Ä–æ–≤.",
            Markup.inlineKeyboard([
              [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_menu")],
            ]),
          );
        }
      } else {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    });

    this.bot.action("back_to_menu", async (ctx) => {
      await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        Markup.inlineKeyboard([
          [Markup.button.callback("üóÇÔ∏è –°–ø–∏—Å–æ–∫ –æ–±–∑–æ—Ä–æ–≤", "reviews_list")],
          [Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±–∑–æ—Ä", "add_review")],
        ]),
      );
    });
  }

  private async showReviews(username: string): Promise<Review[]> {
    const query = `
      SELECT * FROM reviews
      WHERE username = $1
    `;

    try {
      const client = await pool.connect();
      const result = await client.query(query, [username]);
      client.release();
      return result.rows;
    } catch (err) {
      console.error(err);
      return [];
    }
  }
}
