import { Markup, Telegraf } from "telegraf";
import { Command } from "./command.class";
import { IBotContext } from "../context/context.interface";
import pool from "../db/db.config";

export class StartCommand extends Command {
  constructor(bot: Telegraf<IBotContext>) {
    super(bot);
  }

  handle(): void {
    this.bot.start((ctx) => {
      if (!ctx.session.user) {
        ctx.session.user = {
          id: undefined,
          username: undefined,
        };
      }

      ctx.session.user.id = ctx.from?.id;
      ctx.session.user.username = ctx.from?.username;
      this.addUser(ctx.from?.username);
      ctx.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:",
        Markup.keyboard([["üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"]])
          .resize()
          .oneTime(false),
      );
    });

    this.bot.hears("üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", (ctx) => {
      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "–°–ø–∏—Å–æ–∫ –æ–±–∑–æ—Ä–æ–≤",
              "reviews_list",
            ),
          ],
          [Markup.button.callback("–î–æ–±–∞–≤–∏—Ç—å –æ–±–∑–æ—Ä", "add_review")],
        ]),
      );
    });
  }

  private async addUser(username: string | undefined) {
    if (!username) {
      throw new Error("Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
    }

    const checkUserQuery = `
      SELECT * FROM users WHERE username = $1;
    `;

    const insertUserQuery = `
      INSERT INTO users (username)
      VALUES ($1)
      RETURNING *;
    `;

    try {
      const client = await pool.connect();

      const checkResult = await client.query(checkUserQuery, [username]);
      
      if (checkResult.rows.length > 0) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", checkResult.rows[0]);
        client.release();
        return checkResult.rows[0];
      }

      const insertResult = await client.query(insertUserQuery, [username]);
      client.release();

      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:", insertResult.rows[0]);
      return insertResult.rows[0];
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      throw error;
    }
  }
}
